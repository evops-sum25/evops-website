syntax = "proto3";
package evops.api.v1;

import "google/protobuf/timestamp.proto";

// Manages event-related operations.
service EventService {
  // Retrieves a single event by ID.
  rpc Find(EventServiceFindRequest) returns (EventServiceFindResponse);
  // Lists all events.
  rpc List(EventServiceListRequest) returns (EventServiceListResponse);
  // Creates a new event.
  rpc Create(EventServiceCreateRequest) returns (EventServiceCreateResponse);
}

// Manages event tags.
service TagService {
  // Retrieves a tag by ID.
  rpc Find(TagServiceFindRequest) returns (TagServiceFindResponse);
  // Lists all tags.
  rpc List(TagServiceListRequest) returns (TagServiceListResponse);
  // Creates a new tag.
  rpc Create(TagServiceCreateRequest) returns (TagServiceCreateResponse);
}

// Manages user accounts.
service UserService {
  // Retrieves a user by ID.
  rpc Find(UserServiceFindRequest) returns (UserServiceFindResponse);
  // Lists all users.
  rpc List(UserServiceListRequest) returns (UserServiceListResponse);
  // Creates a new user.
  rpc Create(UserServiceCreateRequest) returns (UserServiceCreateResponse);
}

message EventServiceFindRequest {
  // UUID of the event to retrieve.
  string id = 1;
}

message EventServiceFindResponse {
  // Retrieved event object.
  Event event = 1;
}

message TagServiceFindRequest {
  // UUID of the tag to retrieve.
  string id = 1;
}

message TagServiceFindResponse {
  // Retrieved tag object.
  Tag tag = 1;
}

message UserServiceFindRequest {
  // UUID of the user to retrieve.
  string id = 1;
}

message UserServiceFindResponse {
  // Retrieved user object.
  User user = 1;
}

message EventServiceListRequest {}

message EventServiceListResponse {
  // List of all events.
  repeated Event events = 1;
}

message TagServiceListRequest {}

message TagServiceListResponse {
  // List of all tags.
  repeated Tag tags = 1;
}

message UserServiceListRequest {}

message UserServiceListResponse {
  // List of all users.
  repeated User users = 1;
}

message EventServiceCreateRequest {
  // Data for creating a new event.
  NewEventForm form = 1;
}

message EventServiceCreateResponse {
  // Created event object.
  Event event = 1;
}

message NewEventForm {
  // **Required**. UUID of the creating user.
  string author_id = 1;
  // URLs of event images.
  repeated string image_urls = 2;
  // **Required**. Event title.
  string title = 3;
  // **Required**. Detailed description.
  string description = 4;
  // UUIDs of associated tags.
  repeated string tag_ids = 5;
  // Whether to enable attendance tracking.
  bool with_attendance = 6;
}

message Event {
  // Event UUID.
  string id = 1;
  // User who created the event.
  User author = 2;
  // URLs of event images.
  repeated string image_urls = 3;
  // Event title.
  string title = 4;
  // Detailed description.
  string description = 5;
  // Associated tags.
  repeated Tag tags = 6;
  // Whether attendance tracking is enabled.
  bool with_attendance = 7;
  // Creation timestamp.
  google.protobuf.Timestamp created_at = 8;
  // Last modification timestamp.
  google.protobuf.Timestamp modified_at = 9;
}

message TagServiceCreateRequest {
  // Data for creating a new tag.
  NewTagForm form = 1;
}

message TagServiceCreateResponse {
  // Created tag object.
  Tag tag = 1;
}

message NewTagForm {
  // **Required**. Unique name.
  string name = 1;
  // Alternative names.
  repeated string aliases = 2;
}

message Tag {
  // Tag UUID.
  string id = 1;
  // Unique name (e.g., `"Music"`, `"Tech"`).
  string name = 2;
  // Alternative names (e.g., `["Concert", "Gig"]` for `"Music"`).
  repeated string aliases = 3;
}

message UserServiceCreateRequest {
  // Data for creating a new user.
  NewUserForm form = 1;
}

message UserServiceCreateResponse {
  // Created user object.
  User user = 1;
}

message NewUserForm {
  // **Required**. Display name.
  string name = 1;
}

message User {
  // User UUID.
  string id = 1;
  // Display name.
  string name = 2;
}
